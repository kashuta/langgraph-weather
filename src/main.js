/**
 * @fileoverview –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
 */

import "dotenv/config";
import { ChatOpenAI } from "@langchain/openai";
import { HumanMessage, AIMessage } from "@langchain/core/messages";
import { MemorySaver } from "@langchain/langgraph";
import { askQuestion } from "./console.js";
import readline from "readline";

// –ò–º–ø–æ—Ä—Ç —Ñ–∞–±—Ä–∏–∫ –∞–≥–µ–Ω—Ç–æ–≤
import { createWeatherAgent } from "./agents/weather.js";
import { createGeographyAgent } from "./agents/geography.js";
import { createGeographyAgentWithHITL } from "./agents/geography-with-hitl.js";

// –ò–º–ø–æ—Ä—Ç –ø–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π –≥—Ä–∞—Ñ–æ–≤
import { buildGraph as buildSupervisorGraph } from "./graph/supervisor.js";
import { buildGraph as buildFallbackGraph } from "./graph/fallback_supervisor.js";
import { buildHITLGraph } from "./graph/supervisor-with-hitl.js";


/**
 * –û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
 */
async function main() {
  const llm = new ChatOpenAI({
    model: "gpt-4o-mini",
    temperature: 0,
    apiKey: process.env.OPENAI_API_KEY,
  });
  
  const checkpointer = new MemorySaver();

  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });
  
  const supervisorType = await askQuestion(rl, "–ö–∞–∫–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–ø—É—Å—Ç–∏—Ç—å? (1: –†–µ–∞–∫—Ç–∏–≤–Ω—ã–π, 2: –û—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤—ã–π, 3: HITL) ");

  let graph;

  if (supervisorType.trim() === "3") {
    console.log("üîµ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HITL-—Å—Ü–µ–Ω–∞—Ä–∏—è...");
    const weatherAgent = createWeatherAgent(llm);
    const geographyAgentWithHITL = createGeographyAgentWithHITL(llm);
    // –î–ª—è —ç—Ç–æ–≥–æ –≥—Ä–∞—Ñ–∞ –º—ã –ø–µ—Ä–µ–¥–∞–µ–º —Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä–∞ –∫–∞–∫ —É–∑–µ–ª
    graph = await buildHITLGraph(llm, weatherAgent, geographyAgentWithHITL);
  } else if (supervisorType.trim() === "2") {
    console.log("üîµ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –û—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è...");
    const weatherAgent = createWeatherAgent(llm);
    const geographyAgent = createGeographyAgent(llm);
    graph = await buildFallbackGraph(weatherAgent, geographyAgent);
  } else {
    console.log("üîµ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –†–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è...");
    const weatherAgent = createWeatherAgent(llm);
    const geographyAgent = createGeographyAgent(llm);
    graph = (await buildSupervisorGraph(llm, weatherAgent, geographyAgent)).compile();
  }

  const threadId = Date.now().toString();
  const config = { "configurable": { "thread_id": threadId }};
  
  console.log(`\n‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π –≥–æ—Ç–æ–≤. ID –¥–∏–∞–ª–æ–≥–∞: ${threadId}`);
  console.log("   –í–≤–µ–¥–∏—Ç–µ 'exit' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.");

  let userQuery;
  while ((userQuery = await askQuestion(rl, "\n> ")) !== "exit") {
    const inputs = { messages: [new HumanMessage(userQuery)] };
    
    let currentState = await graph.invoke(inputs, { ...config, checkpoint: checkpointer });
    
    while(currentState.__interrupt__) {
        console.log("\n‚è∏Ô∏è  –ì–†–ê–§ –ü–†–ï–†–í–ê–ù –î–õ–Ø –í–ú–ï–®–ê–¢–ï–õ–¨–°–¢–í–ê");
        const lastMessageContent = currentState.messages[currentState.messages.length - 1].content;
        const { confidence, content } = JSON.parse(lastMessageContent);

        console.log(`   –ê–≥–µ–Ω—Ç –ø—Ä–µ–¥–ª–æ–∂–∏–ª –æ—Ç–≤–µ—Ç: "${content}"`);
        console.log(`   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${Math.round(confidence * 100)}%`);

        const action = await askQuestion(rl, "   –í–∞—à–µ –¥–µ–π—Å—Ç–≤–∏–µ? (a: approve, e: edit, r: reject) ");

        if(action === 'a') {
            currentState = await graph.continue({ messages: [] }, { ...config, checkpoint: checkpointer });
        } else if (action === 'e') {
            const newAnswer = await askQuestion(rl, "   –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç: ");
            currentState = await graph.continue({ messages: [new AIMessage(newAnswer)] }, { ...config, checkpoint: checkpointer });
        } else {
             currentState = await graph.continue({ messages: [new AIMessage("–ó–∞–¥–∞—á–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ —á–µ–ª–æ–≤–µ–∫–æ–º.")] }, { ...config, checkpoint: checkpointer });
        }
    }
    
    console.log("\n‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:", currentState.messages.slice(-1)[0].content);
  }

  rl.close();
}

main().catch(console.error);
