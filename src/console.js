/**
 * @fileoverview –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å.
 */

import readline from 'readline';

/**
 * –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Å–æ–ª–∏.
 * @returns {readline.Interface} –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å readline.
 */
const createReadlineInterface = () => {
  return readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });
};

/**
 * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª–∏.
 * @param {readline.Interface} rl - –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å readline.
 * @param {string} question - –í–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
 * @returns {Promise<string>} –í–≤–µ–¥–µ–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å—Ç—Ä–æ–∫–∞.
 */
export const askQuestion = (rl, question) => {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer);
    });
  });
};

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * @param {Function} callback - –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è —Å –∫–∞–∂–¥—ã–º –Ω–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º.
 */
export const startConversation = async (callback) => {
  const rl = createReadlineInterface();
  console.log('üîµ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å. –î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ "exit".');

  let keepRunning = true;
  while (keepRunning) {
    const userInput = await askQuestion(rl, '> ');
    if (userInput.toLowerCase() === 'exit') {
      keepRunning = false;
    } else {
      await callback(userInput);
    }
  }

  rl.close();
  console.log('üîµ –†–∞–∑–≥–æ–≤–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω.');
};
