/**
 * @fileoverview –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç WeatherAPI.com, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –∫–ª—é—á, –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
 */

import 'dotenv/config';
import { tool } from "@langchain/core/tools";
import { z } from "zod";
import fetch from "node-fetch";
import { extractCityFromQuery } from '../utils.js';

const getWeatherData = async (city) => {
  console.log(`  [Weather Tool] üå§Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞: ${city}`);
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const apiKey = process.env.WEATHERAPI_COM_KEY;

  if (!apiKey || apiKey === 'YOUR_API_KEY_HERE') {
    console.log("  [Weather Tool] ‚ö†Ô∏è  API –∫–ª—é—á WeatherAPI.com –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.");
    return `–ú–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –í –≥–æ—Ä–æ–¥–µ ${city} —Å–µ–π—á–∞—Å 22¬∞C, –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å.`;
  }
  
  try {
    // –ù–æ–≤—ã–π URL –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    const url = `https://api.weatherapi.com/v1/current.json?key=${apiKey}&q=${encodeURIComponent(city)}&aqi=no&lang=ru`;
    const response = await fetch(url);
    const data = await response.json();
    
    if (!response.ok) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ API
      const errorMessage = data.error ? data.error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API';
      console.error(`  [Weather Tool] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç API WeatherAPI.com: ${errorMessage}`);
      return `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ ${city}. –ü—Ä–∏—á–∏–Ω–∞: ${errorMessage}.`;
    }
    
    // –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞
    const { location, current } = data;
    return `–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ ${location.name}: ${current.temp_c}¬∞C, ${current.condition.text}.`;
    
  } catch (error) {
    console.error(`  [Weather Tool] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API:`, error);
    return `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ ${city}.`;
  }
};

export const weatherTool = tool(
  async ({ query }) => {
    console.log(`[Tool Call] üìû –í—ã–∑–≤–∞–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç 'get_weather' —Å –∑–∞–ø—Ä–æ—Å–æ–º: "${query}"`);
    const city = extractCityFromQuery(query);
    return await getWeatherData(city);
  },
  {
    name: "get_weather",
    description: "–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ.",
    schema: z.object({
      query: z.string().describe("–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞."),
    }),
  }
);
