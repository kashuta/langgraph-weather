/**
 * @fileoverview C—É–ø–µ—Ä–≤–∏–∑–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç—Ä–æ–∏—Ç –ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (execution plan).
 * –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ —Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä–∞, —ç—Ç–æ—Ç —Å–Ω–∞—á–∞–ª–∞ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É,
 * –∞ –∑–∞—Ç–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —à–∞–≥–∏.
 */

import { StateGraph, END, Annotation } from "@langchain/langgraph";
import { ChatOpenAI } from "@langchain/openai";
import { HumanMessage } from "@langchain/core/messages";
import { z } from "zod";
import { ChatPromptTemplate } from "@langchain/core/prompts";
import { zodToJsonSchema } from "zod-to-json-schema";

/**
 * @typedef {Object} PlanStep
 * @property {string} agent - –ò–º—è –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞.
 * @property {string} query - –ó–∞–ø—Ä–æ—Å –¥–ª—è —ç—Ç–æ–≥–æ –∞–≥–µ–Ω—Ç–∞.
 */

/**
 * @typedef {Object} PlannerAgentState
 * @property {HumanMessage[]} messages - –í—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
 * @property {PlanStep[]} plan - –ü–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º.
 * @property {any[]} past_steps - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —à–∞–≥–æ–≤.
 * @property {string} response - –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 */
export const PlannerAgentState = Annotation.Root({
  messages: Annotation({
    reducer: (x, y) => x.concat(y),
    default: () => [],
  }),
  plan: Annotation({
    reducer: (_x, y) => y,
    default: () => [],
  }),
  past_steps: Annotation({
    reducer: (x, y) => x.concat(y),
    default: () => [],
  }),
  response: Annotation({
    reducer: (_x, y) => y,
    default: () => null,
  }),
});

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ö–µ–º—É –¥–ª—è –ø–ª–∞–Ω–∞, —á—Ç–æ–±—ã LLM –≤–æ–∑–≤—Ä–∞—â–∞–ª —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
 */
const planSchema = z.object({
  steps: z.array(z.object({
    agent: z.string().describe("–ê–≥–µ–Ω—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞ (WeatherAgent –∏–ª–∏ GeographyAgent)"),
    query: z.string().describe("–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∏ —Å–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —ç—Ç–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"),
  })).describe("–†–∞–∑–Ω—ã–µ —à–∞–≥–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ"),
});

/**
 * –°–æ–∑–¥–∞–µ—Ç —É–∑–µ–ª-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.
 * @param {ChatOpenAI} llm 
 * @returns 
 */
const createPlannerNode = (llm) => {
  const plannerPrompt = ChatPromptTemplate.fromTemplate(
    "–î–ª—è –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ —Å–æ—Å—Ç–∞–≤—å –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω. " +
    "–≠—Ç–æ—Ç –ø–ª–∞–Ω –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å –≤ —Å–µ–±—è –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ, –±—É–¥—É—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –¥–∞–¥—É—Ç –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç. " +
    "–ù–µ –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–∏—Ö —à–∞–≥–æ–≤. " +
    "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —à–∞–≥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º. " +
    "–£–±–µ–¥–∏—Å—å, —á—Ç–æ –∫–∞–∂–¥—ã–π —à–∞–≥ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é - –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–π —à–∞–≥–∏.\n\n" +
    "–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {objective}"
  );
  
  const planner = plannerPrompt.pipe(llm.withStructuredOutput(planSchema, { name: "plan" }));

  return async (state) => {
    console.log("\n‚ñ∂Ô∏è  –í—Ö–æ–¥ –≤ –Ω–æ–¥—É 'planner'...");
    const plan = await planner.invoke({ objective: state.messages.slice(-1)[0].content });
    console.log("  [Planner] üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø–ª–∞–Ω:");
    plan.steps.forEach((step, i) => {
      console.log(`    [–®–∞–≥ ${i+1}] –ê–≥–µ–Ω—Ç: ${step.agent}, –ó–∞–ø—Ä–æ—Å: "${step.query}"`);
    });
    console.log("‚óÄÔ∏è  –í—ã—Ö–æ–¥ –∏–∑ –Ω–æ–¥—ã 'planner'.");
    return { plan: plan.steps };
  };
};

/**
 * –°–æ–∑–¥–∞–µ—Ç —É–∑–µ–ª-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å.
 * @param {Record<string, import("@langchain/langgraph/prebuilt").ReactAgentExecutor>} agentMap 
 * @returns 
 */
const createExecutionNode = (agentMap) => {
  return async (state) => {
    const step = state.plan[0];
    const agent = agentMap[step.agent];
    if (!agent) {
      throw new Error(`–ê–≥–µ–Ω—Ç '${step.agent}' –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    }

    console.log(`\n‚ñ∂Ô∏è  –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–∞: –≤—ã–∑–æ–≤ '${step.agent}' —Å –∑–∞–ø—Ä–æ—Å–æ–º "${step.query}"...`);
    const result = await agent.invoke({ messages: [new HumanMessage(step.query)] });
    const resultMessage = result.messages.slice(-1)[0].content;
    console.log(`‚óÄÔ∏è  –®–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç: ${resultMessage}`);
    
    return { 
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –£–î–ê–õ–Ø–ï–ú –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —à–∞–≥ –∏–∑ –ø–ª–∞–Ω–∞
      past_steps: [{
        agent: step.agent,
        query: step.query,
        result: resultMessage
      }],
      plan: state.plan.slice(1),
    };
  };
};

/**
 * –£–∑–µ–ª, –∫–æ—Ç–æ—Ä—ã–π –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.
 * @param {ChatOpenAI} llm 
 */
const createResponseNode = (llm) => {
    const responsePrompt = ChatPromptTemplate.fromMessages([
        ["system", "–¢—ã - –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –≤–∑—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –∏ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–∑ –Ω–∏—Ö –µ–¥–∏–Ω—ã–π, –∫—Ä–∞—Å–∏–≤—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–æ—Ç –∏—Å—Ç–æ—Ä–∏—è –Ω–∞—à–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–±–æ—Ç—ã:"],
        ["human", "–ò–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª: {objective}"],
        ["human", "–í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–±—Ä–∞–ª–∏ –∞–≥–µ–Ω—Ç—ã: {results}"],
        ["human", "–°–∫–æ–º–±–∏–Ω–∏—Ä—É–π –≤—Å–µ —ç—Ç–æ –≤ –æ–¥–∏–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç."],
    ]);

    const responseChain = responsePrompt.pipe(llm);

    return async (state) => {
        console.log("\n‚ñ∂Ô∏è  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞...");
        const objective = state.messages[0].content;
        const results = JSON.stringify(state.past_steps, null, 2);
        const response = await responseChain.invoke({ objective, results });
        console.log(`‚óÄÔ∏è  –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${response.content}`);
        return { response: response.content };
    }
}


/**
 * –õ–æ–≥–∏–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞.
 * @param {PlannerAgentState} state 
 * @returns {"executor" | "responder"}
 */
const shouldContinue = (state) => {
  if (state.plan && state.plan.length > 0) {
    console.log("  [Graph Logic] üö¶ –í –ø–ª–∞–Ω–µ –æ—Å—Ç–∞–ª–∏—Å—å —à–∞–≥–∏. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.");
    return "executor";
  } else {
    console.log("  [Graph Logic] üèÅ –ü–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω. –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.");
    return "responder";
  }
};


export const buildPlannerGraph = async (llm, weatherAgent, geographyAgent) => {
  const agentMap = {
    "WeatherAgent": weatherAgent,
    "GeographyAgent": geographyAgent,
  };

  const plannerNode = createPlannerNode(llm);
  const executionNode = createExecutionNode(agentMap);
  const responseNode = createResponseNode(llm);

  const workflow = new StateGraph(PlannerAgentState)
    .addNode("planner", plannerNode)
    .addNode("executor", executionNode)
    .addNode("responder", responseNode);

  workflow.setEntryPoint("planner");
  
  workflow.addConditionalEdges(
    "planner",
     // –ü–æ—Å–ª–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—à–∞–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤–æ–æ–±—â–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å —á—Ç–æ-—Ç–æ
    (state) => {
      if (state.plan && state.plan.length > 0) {
        return "executor";
      } else {
        return "responder";
      }
    },
    {
      "executor": "executor",
      "responder": "responder",
    }
  );
  
  workflow.addConditionalEdges(
    "executor",
    shouldContinue,
    {
      "executor": "executor",
      "responder": "responder",
    }
  );
  
  workflow.addEdge("responder", END);

  return workflow.compile();
};

