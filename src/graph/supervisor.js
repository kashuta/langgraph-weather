/**
 * @fileoverview –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –≥—Ä–∞—Ñ–∞ LangGraph.
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ª–æ–≥–∏–∫—É —É–∑–ª–æ–≤ –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é –¥–ª—è –º–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.
 */

import { END, Annotation, StateGraph } from "@langchain/langgraph";
import { HumanMessage } from "@langchain/core/messages";
import { z } from "zod";
import { ChatPromptTemplate, MessagesPlaceholder } from "@langchain/core/prompts";

/**
 * @typedef {Object} AgentState
 * @property {import("@langchain/core/messages").BaseMessage[]} messages - –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–µ.
 * @property {string | null} next - –ò–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞.
 */

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –º–µ–∂–¥—É —É–∑–ª–∞–º–∏ –≥—Ä–∞—Ñ–∞.
 * @type {import("@langchain/langgraph").StateGraphArgs<AgentState>['channels']}
 */
export const AgentState = Annotation.Root({
  messages: Annotation({
    reducer: (x, y) => x.concat(y),
    default: () => [],
  }),
  next: Annotation({
    reducer: (_x, y) => y,
    default: () => null,
  }),
});

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ª–æ–≥–∏–∫—É –æ–¥–Ω–æ–≥–æ —É–∑–ª–∞-–∞–≥–µ–Ω—Ç–∞ –≤ –≥—Ä–∞—Ñ–µ.
 * @param {object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
 * @param {AgentState} params.state - –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥—Ä–∞—Ñ–∞.
 * @param {import("@langchain/langgraph/prebuilt").ReactAgentExecutor} params.agent - –≠–∫–∑–µ–º–ø–ª—è—Ä –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞.
 * @param {string} params.name - –ò–º—è –∞–≥–µ–Ω—Ç–∞ (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è).
 * @returns {Promise<{messages: import("@langchain/core/messages").HumanMessage[]}>} –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è.
 */
async function runAgentNode(params) {
  const { state, agent, name } = params;
  console.log(`\n‚ñ∂Ô∏è  –í—Ö–æ–¥ –≤ –Ω–æ–¥—É '${name}'...`);
  const result = await agent.invoke(state);
  console.log(`‚óÄÔ∏è  –í—ã—Ö–æ–¥ –∏–∑ –Ω–æ–¥—ã '${name}'.`);
  return {
    messages: [new HumanMessage({ content: result.messages.slice(-1)[0].content, name })],
  };
}

/**
 * –°—Ç—Ä–æ–∏—Ç –∏ –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π –≥—Ä–∞—Ñ LangGraph.
 * @param {import("@langchain/openai").ChatOpenAI} llm - –≠–∫–∑–µ–º–ø–ª—è—Ä —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è —Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä–∞.
 * @param {import("@langchain/langgraph/prebuilt").ReactAgentExecutor} weatherAgent - –≠–∫–∑–µ–º–ø–ª—è—Ä –∞–≥–µ–Ω—Ç–∞ –ø–æ–≥–æ–¥—ã.
 * @param {import("@langchain/langgraph/prebuilt").ReactAgentExecutor} geographyAgent - –≠–∫–∑–µ–º–ø–ª—è—Ä –∞–≥–µ–Ω—Ç–∞ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏.
 * @returns {Promise<import("@langchain/langgraph").CompiledStateGraph>} –°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞—Ñ.
 */
export async function buildGraph(llm, weatherAgent, geographyAgent) {
  const members = ["WeatherAgent", "GeographyAgent"];
  const options = ["FINISH", ...members];

  const supervisorPrompt = ChatPromptTemplate.fromMessages([
    ["system", "–í—ã —Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä, —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –∫–æ–º–∞–Ω–¥–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤: {members}. " +
      "–í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –Ω—É–∂–Ω–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É. " +
      "–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –æ—Ç–≤–µ—Ç, –≤–∞—à–∞ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. " +
      "–í—Å–µ–≥–¥–∞ –≤—ã–±–∏—Ä–∞–π—Ç–µ FINISH, –µ—Å–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —É–∂–µ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞."],
    new MessagesPlaceholder("messages"),
    ["human", "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –¥–∏–∞–ª–æ–≥. –ö–∞–∫–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–º, –∏–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞? –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑: {options}"],
  ]);

  const supervisorLLMChain = supervisorPrompt.pipe(llm.bindTools([
    {
      name: "route",
      description: "–í—ã–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É.",
      schema: z.object({
        next: z.enum(options),
      }),
    }
  ], { tool_choice: "route", parallel_tool_calls: false }));

  const weatherAgentNode = (state) => runAgentNode({ state, agent: weatherAgent, name: "WeatherAgent" });
  const geographyAgentNode = (state) => runAgentNode({ state, agent: geographyAgent, name: "GeographyAgent" });
  
  const supervisorNode = async (state) => {
      console.log("\n‚ñ∂Ô∏è  –í—Ö–æ–¥ –≤ –Ω–æ–¥—É 'supervisor'...");
      console.log("  [Supervisor] üîé –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è:");
      state.messages.forEach((msg, i) => {
        console.log(`    [–°–æ–æ–±—â–µ–Ω–∏–µ ${i}]`);
        console.log(`      - –¢–∏–ø: ${msg._getType()}`);
        console.log(`      - –ö–æ–Ω—Ç–µ–Ω—Ç: "${msg.content}"`);
        if (msg.name) {
            console.log(`      - –ò—Å—Ç–æ—á–Ω–∏–∫: ${msg.name}`);
        }
      });

      const chainInput = { ...state, members: members.join(", "), options: options.join(", ") };
      const formattedPrompt = await supervisorPrompt.formatMessages(chainInput);
      
      console.log("  [Supervisor] ‚û°Ô∏è  –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ LLM —Å –ø—Ä–æ–º–ø—Ç–æ–º:");
      formattedPrompt.forEach((msg, i) => {
          console.log(`    [–ü—Ä–æ–º–ø—Ç ${i} ${msg._getType()}]: ${msg.content}`);
      });

      const llmResponse = await supervisorLLMChain.invoke(chainInput);
      
      console.log("  [Supervisor] ‚¨ÖÔ∏è  –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç LLM:");
      console.log(`      - –ö–æ–Ω—Ç–µ–Ω—Ç: ${llmResponse.content}`);
      if (llmResponse.tool_calls && llmResponse.tool_calls.length > 0) {
          console.log(`      - –í—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: ${llmResponse.tool_calls[0].name}`);
          console.log(`      - –ê—Ä–≥—É–º–µ–Ω—Ç—ã: ${JSON.stringify(llmResponse.tool_calls[0].args)}`);
      }

      const result = llmResponse.tool_calls[0].args;
      console.log(`  [Supervisor] üß† –†–µ—à–µ–Ω–∏–µ: –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ '${result.next}'`);
      console.log("‚óÄÔ∏è  –í—ã—Ö–æ–¥ –∏–∑ –Ω–æ–¥—ã 'supervisor'.");
      return { next: result.next };
  };

  const workflow = new StateGraph(AgentState)
    .addNode("WeatherAgent", weatherAgentNode)
    .addNode("GeographyAgent", geographyAgentNode)
    .addNode("supervisor", supervisorNode);

  members.forEach((member) => workflow.addEdge(member, "supervisor"));

  const conditionalMap = {
    WeatherAgent: "WeatherAgent",
    GeographyAgent: "GeographyAgent",
    FINISH: END,
  };
  
  workflow.addConditionalEdges("supervisor", (state) => {
    console.log(`  [Graph Logic] üö¶ –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—à–µ–Ω–∏—è —Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä–∞: '${state.next}'`);
    return state.next;
    }, conditionalMap
  );
  
  workflow.setEntryPoint("supervisor");

  return workflow;
} 