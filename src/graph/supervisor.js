import { END, Annotation, StateGraph } from "@langchain/langgraph";
import { HumanMessage } from "@langchain/core/messages";
import { z } from "zod";
import { ChatPromptTemplate, MessagesPlaceholder } from "@langchain/core/prompts";

export const AgentState = Annotation.Root({
  messages: Annotation({
    reducer: (x, y) => x.concat(y),
    default: () => [],
  }),
  next: Annotation({
    reducer: (_x, y) => y,
    default: () => null,
  }),
});

async function runAgentNode(params) {
  const { state, agent, name } = params;
  console.log(`\n‚ñ∂Ô∏è  –í—Ö–æ–¥ –≤ –Ω–æ–¥—É '${name}'...`);
  const result = await agent.invoke(state);
  console.log(`‚óÄÔ∏è  –í—ã—Ö–æ–¥ –∏–∑ –Ω–æ–¥—ã '${name}'.`);
  return {
    messages: [new HumanMessage({ content: result.messages.slice(-1)[0].content, name })],
  };
}

export async function buildGraph(llm, weatherAgent, geographyAgent) {
  const members = ["WeatherAgent", "GeographyAgent"];
  const options = ["FINISH", ...members];

  const supervisorPrompt = ChatPromptTemplate.fromMessages([
    ["system", "–í—ã —Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä, —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –∫–æ–º–∞–Ω–¥–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤: {members}. " +
      "–í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –Ω—É–∂–Ω–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É. " +
      "–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –æ—Ç–≤–µ—Ç, –≤–∞—à–∞ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. " +
      "–í—Å–µ–≥–¥–∞ –≤—ã–±–∏—Ä–∞–π—Ç–µ FINISH, –µ—Å–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —É–∂–µ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞."],
    new MessagesPlaceholder("messages"),
    ["human", "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –¥–∏–∞–ª–æ–≥. –ö–∞–∫–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–º, –∏–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞? –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑: {options}"],
  ]);

  const supervisorChain = supervisorPrompt.pipe(llm.bindTools([
    {
      name: "route",
      description: "–í—ã–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É.",
      schema: z.object({
        next: z.enum(options),
      }),
    }
  ], { tool_choice: "route", parallel_tool_calls: false })).pipe(msg => msg.tool_calls[0].args);

  const weatherAgentNode = (state) => runAgentNode({ state, agent: weatherAgent, name: "WeatherAgent" });
  const geographyAgentNode = (state) => runAgentNode({ state, agent: geographyAgent, name: "GeographyAgent" });
  
  const supervisorNode = async (state) => {
      console.log("\n‚ñ∂Ô∏è  –í—Ö–æ–¥ –≤ –Ω–æ–¥—É 'supervisor'...");
      const result = await supervisorChain.invoke({ ...state, members: members.join(", "), options: options.join(", ") });
      console.log(`  [Supervisor] üß† –†–µ—à–µ–Ω–∏–µ: –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ '${result.next}'`);
      console.log("‚óÄÔ∏è  –í—ã—Ö–æ–¥ –∏–∑ –Ω–æ–¥—ã 'supervisor'.");
      return { next: result.next };
  };

  const workflow = new StateGraph(AgentState)
    .addNode("WeatherAgent", weatherAgentNode)
    .addNode("GeographyAgent", geographyAgentNode)
    .addNode("supervisor", supervisorNode);

  members.forEach((member) => workflow.addEdge(member, "supervisor"));

  const conditionalMap = {
    WeatherAgent: "WeatherAgent",
    GeographyAgent: "GeographyAgent",
    FINISH: END,
  };
  
  workflow.addConditionalEdges("supervisor", (state) => {
    console.log(`  [Graph Logic] üö¶ –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—à–µ–Ω–∏—è —Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä–∞: '${state.next}'`);
    return state.next;
    }, conditionalMap
  );
  
  workflow.setEntryPoint("supervisor");

  return workflow.compile();
} 