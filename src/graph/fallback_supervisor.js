/**
 * @fileoverview –û—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤—ã–π —Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä —Å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –º–æ–¥–µ–ª–µ–π.
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –≥—Ä–∞—Ñ, –∫–æ—Ç–æ—Ä—ã–π —Å–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å gpt-4o-mini,
 * –∞ –ø—Ä–∏ —Å–±–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ gpt-4.
 */

import { END, Annotation, StateGraph } from "@langchain/langgraph";
import { HumanMessage } from "@langchain/core/messages";
import { z } from "zod";
import {
  ChatPromptTemplate,
  MessagesPlaceholder,
} from "@langchain/core/prompts";
import { ChatOpenAI } from "@langchain/openai";

/**
 * @typedef {Object} FallbackAgentState
 * @property {import("@langchain/core/messages").BaseMessage[]} messages
 * @property {string | null} next
 * @property {'gpt-4o-mini' | 'gpt-4'} currentModel
 * @property {Error | null} lastError
 */

export const FallbackAgentState = Annotation.Root({
  messages: Annotation({
    reducer: (x, y) => x.concat(y),
    default: () => [],
  }),
  next: Annotation({
    reducer: (_x, y) => y,
    default: () => null,
  }),
  currentModel: Annotation({
    reducer: (_x, y) => y,
    default: () => "gpt-4o-mini",
  }),
  lastError: Annotation({
    reducer: (_x, y) => y,
    default: () => null,
  }),
});

async function runAgentNode({ state, agent, name }) {
  console.log(`\n‚ñ∂Ô∏è  –í—Ö–æ–¥ –≤ –Ω–æ–¥—É '${name}'...`);
  const result = await agent.invoke(state);
  console.log(`‚óÄÔ∏è  –í—ã—Ö–æ–¥ –∏–∑ –Ω–æ–¥—ã '${name}'.`);
  return {
    messages: [
      new HumanMessage({ content: result.messages.slice(-1)[0].content, name }),
    ],
  };
}

function createSupervisorChain(modelName) {
  const members = ["WeatherAgent", "GeographyAgent"];
  const options = ["FINISH", ...members];

  const supervisorPrompt = ChatPromptTemplate.fromMessages([
    [
      "system",
      "–í—ã —Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä, —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –∫–æ–º–∞–Ω–¥–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤: {members}. " +
        "–í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –Ω—É–∂–Ω–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É. " +
        "–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –æ—Ç–≤–µ—Ç, –≤–∞—à–∞ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. " +
        "–í—Å–µ–≥–¥–∞ –≤—ã–±–∏—Ä–∞–π—Ç–µ FINISH, –µ—Å–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —É–∂–µ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.",
    ],
    new MessagesPlaceholder("messages"),
    [
      "human",
      "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –¥–∏–∞–ª–æ–≥. –ö–∞–∫–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–º, –∏–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞? –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑: {options}",
    ],
  ]);

  const llm = new ChatOpenAI({
    model: modelName,
    temperature: 0,
    apiKey: process.env.OPENAI_API_KEY,
  });

  return supervisorPrompt.pipe(
    llm.bindTools(
      [
        {
          name: "route",
          description: "–í—ã–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É.",
          schema: z.object({
            next: z.enum(options),
          }),
        },
      ],
      { tool_choice: "route", parallel_tool_calls: false }
    )
  );
}

export async function buildGraph(weatherAgent, geographyAgent) {
  const supervisorMiniChain = createSupervisorChain("gpt-4o-mini");
  const supervisorFullChain = createSupervisorChain("gpt-4");

  const supervisorMini = async (state) => {
    const model = "gpt-4o-mini";
    console.log(`\n‚ñ∂Ô∏è  –í—Ö–æ–¥ –≤ —Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä (–ú–æ–¥–µ–ª—å: ${model})...`);
    try {
      const llmResponse = await supervisorMiniChain.invoke({
        ...state,
        members: "WeatherAgent, GeographyAgent",
        options: "FINISH, WeatherAgent, GeographyAgent",
      });
      const nextNode = llmResponse.tool_calls[0].args.next;
      console.log(`  [${model}] üß† –†–µ—à–µ–Ω–∏–µ: –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ '${nextNode}'`);
      return { next: nextNode, lastError: null };
    } catch (error) {
      console.error(`  [${model}] ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
      console.log(`  [${model}] üîÅ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ gpt-4...`);
      return {
        currentModel: "gpt-4",
        lastError: error,
      };
    } finally {
      console.log(`‚óÄÔ∏è  –í—ã—Ö–æ–¥ –∏–∑ —Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä–∞ (${model}).`);
    }
  };

  const supervisorFull = async (state) => {
    const model = "gpt-4";
    console.log(`\n‚ñ∂Ô∏è  –í—Ö–æ–¥ –≤ fallback-—Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä (–ú–æ–¥–µ–ª—å: ${model})...`);
    try {
      const llmResponse = await supervisorFullChain.invoke({
        ...state,
        members: "WeatherAgent, GeographyAgent",
        options: "FINISH, WeatherAgent, GeographyAgent",
      });
      const nextNode = llmResponse.tool_calls[0].args.next;
      console.log(`  [${model}] üß† –†–µ—à–µ–Ω–∏–µ: –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ '${nextNode}'`);
      return { next: nextNode, lastError: null };
    } catch (error) {
      console.error(`  [${model}] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
      return { next: "FINISH", lastError: error };
    } finally {
      console.log(`‚óÄÔ∏è  –í—ã—Ö–æ–¥ –∏–∑ fallback-—Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä–∞ (${model}).`);
    }
  };

  const routeFromSupervisor = (state) => {
    console.log(`\n  [Graph Logic] üö¶ –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:`);
    console.log(`    - –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ${state.lastError ? "–î–∞" : "–ù–µ—Ç"}`);
    console.log(`    - –°–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª: ${state.next}`);

    if (state.lastError) {
      console.log(
        "    - –†–µ—à–µ–Ω–∏–µ: –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ fallback —Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä (supervisor_full)."
      );
      return "supervisor_full";
    }

    console.log(`    - –†–µ—à–µ–Ω–∏–µ: –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ '${state.next}'.`);
    return state.next;
  };

  const weatherAgentNode = (state) =>
    runAgentNode({ state, agent: weatherAgent, name: "WeatherAgent" });
  const geographyAgentNode = (state) =>
    runAgentNode({ state, agent: geographyAgent, name: "GeographyAgent" });

  const workflow = new StateGraph(FallbackAgentState)
    .addNode("WeatherAgent", weatherAgentNode)
    .addNode("GeographyAgent", geographyAgentNode)
    .addNode("supervisor_mini", supervisorMini)
    .addNode("supervisor_full", supervisorFull);

  workflow.addEdge("WeatherAgent", "supervisor_mini");
  workflow.addEdge("GeographyAgent", "supervisor_mini");

  workflow.addConditionalEdges("supervisor_full", (state) => state.next, {
    WeatherAgent: "WeatherAgent",
    GeographyAgent: "GeographyAgent",
    FINISH: END,
  });

  workflow.addConditionalEdges("supervisor_mini", routeFromSupervisor, {
    supervisor_full: "supervisor_full",
    WeatherAgent: "WeatherAgent",
    GeographyAgent: "GeographyAgent",
    FINISH: END,
  });

  workflow.setEntryPoint("supervisor_mini");

  console.log("\n‚úÖ –ì—Ä–∞—Ñ —Å fallback-–ª–æ–≥–∏–∫–æ–π —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω.");
  return workflow.compile();
}
