/**
 * @fileoverview –ì—Ä–∞—Ñ —Å Human-in-the-Loop (HITL) –ª–æ–≥–∏–∫–æ–π.
 */

import { END, StateGraph, interrupt } from "@langchain/langgraph";
import { HumanMessage, AIMessage } from "@langchain/core/messages";
import { AgentState } from "./supervisor.js"; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
import { ChatPromptTemplate, MessagesPlaceholder } from "@langchain/core/prompts";
import { z } from "zod";

/**
 * –£–∑–µ–ª, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞ –∏ –ø—Ä–µ—Ä—ã–≤–∞—é—â–∏–π –≥—Ä–∞—Ñ –ø—Ä–∏ –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏.
 * @param {AgentState} state
 * @returns {AgentState}
 */
const humanInTheLoopNode = (state) => {
  console.log("‚ñ∂Ô∏è  –í—Ö–æ–¥ –≤ –Ω–æ–¥—É 'human_in_the_loop_check'...");
  const lastMessage = state.messages.slice(-1)[0];
  
  try {
    const data = JSON.parse(lastMessage.content);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ JSON –æ—Ç –Ω–∞—à–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    if (data.tool === "get_population" && data.confidence) {
      console.log(`  [HITL Check] üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç 'get_population' —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é ${data.confidence.toFixed(2)}`);
      if (data.confidence < 0.7) {
        console.log("  [HITL Check] ‚è∏Ô∏è  –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞! –ì—Ä–∞—Ñ –ø—Ä–µ—Ä–≤–∞–Ω –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–æ–º.");
        // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞
        return interrupt(); 
      }
       console.log("  [HITL Check] ‚úÖ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É.");
    }
  } catch (e) {
    // –ù–µ JSON –∏–ª–∏ –Ω–µ —Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç - –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
  }
  
  console.log("‚óÄÔ∏è  –í—ã—Ö–æ–¥ –∏–∑ –Ω–æ–¥—ã 'human_in_the_loop_check'.");
  return; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫ —Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä—É
};


/**
 * –°—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ —Å HITL-–ª–æ–≥–∏–∫–æ–π.
 * @param {import("@langchain/langgraph/prebuilt").ReactAgentExecutor} supervisor
 * @param {import("@langchain/langgraph/prebuilt").ReactAgentExecutor} weatherAgent
 * @param {import("@langchain/langgraph/prebuilt").ReactAgentExecutor} geographyAgentWithHITL
 * @returns {import("@langchain/langgraph").CompiledStateGraph}
 */
export async function buildHITLGraph(llm, weatherAgent, geographyAgentWithHITL) {
  const members = ["WeatherAgent", "GeographyAgent"];
  const options = ["FINISH", ...members];
  const supervisorPrompt = ChatPromptTemplate.fromMessages([
    ["system", "–í—ã —Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä, —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –∫–æ–º–∞–Ω–¥–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤: {members}. " +
      "–í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –Ω—É–∂–Ω–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É. " +
      "–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –æ—Ç–≤–µ—Ç, –≤–∞—à–∞ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. " +
      "–í—Å–µ–≥–¥–∞ –≤—ã–±–∏—Ä–∞–π—Ç–µ FINISH, –µ—Å–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —É–∂–µ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞."],
    new MessagesPlaceholder("messages"),
    ["human", "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –¥–∏–∞–ª–æ–≥. –ö–∞–∫–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–º, –∏–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞? –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑: {options}"],
  ]);
  const supervisorLLMChain = supervisorPrompt.pipe(llm.bindTools([
    {
      name: "route",
      description: "–í—ã–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É.",
      schema: z.object({
        next: z.enum(options),
      }),
    }
  ], { tool_choice: "route", parallel_tool_calls: false }));
  const supervisor = async (state) => {
    console.log("\n‚ñ∂Ô∏è  –í—Ö–æ–¥ –≤ –Ω–æ–¥—É 'supervisor'..."); 
    const chainInput = { ...state, members: members.join(", "), options: options.join(", ") };
    const llmResponse = await supervisorLLMChain.invoke(chainInput);
    const result = llmResponse.tool_calls[0].args;
    console.log(`  [Supervisor] üß† –†–µ—à–µ–Ω–∏–µ: –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ '${result.next}'`);
    console.log("‚óÄÔ∏è  –í—ã—Ö–æ–¥ –∏–∑ –Ω–æ–¥—ã 'supervisor'.");
    return { next: result.next };
  };
  
  const weatherAgentNode = async (state) => {
    console.log(`\n‚ñ∂Ô∏è  –í—Ö–æ–¥ –≤ –Ω–æ–¥—É 'WeatherAgent'...`);
    const result = await weatherAgent.invoke(state);
    console.log(`‚óÄÔ∏è  –í—ã—Ö–æ–¥ –∏–∑ –Ω–æ–¥—ã 'WeatherAgent'.`);
    return { messages: [new HumanMessage({ content: result.messages.slice(-1)[0].content, name: "WeatherAgent" })] };
  };
  const geographyAgentNode = async (state) => {
    console.log(`\n‚ñ∂Ô∏è  –í—Ö–æ–¥ –≤ –Ω–æ–¥—É 'GeographyAgent'...`);
    const result = await geographyAgentWithHITL.invoke(state);
    console.log(`‚óÄÔ∏è  –í—ã—Ö–æ–¥ –∏–∑ –Ω–æ–¥—ã 'GeographyAgent'.`);
    return { messages: [new HumanMessage({ content: result.messages.slice(-1)[0].content, name: "GeographyAgent" })] };
  };
  
  const workflow = new StateGraph(AgentState)
    .addNode("supervisor", supervisor)
    .addNode("WeatherAgent", weatherAgentNode)
    .addNode("GeographyAgent", geographyAgentNode)
    .addNode("human_in_the_loop_check", humanInTheLoopNode);

  // –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è
  workflow.addEdge("WeatherAgent", "supervisor");
  workflow.addEdge("GeographyAgent", "human_in_the_loop_check"); // –ü–æ—Å–ª–µ –≥–µ–æ-–∞–≥–µ–Ω—Ç–∞ –∏–¥–µ–º –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
  workflow.addEdge("human_in_the_loop_check", "supervisor"); // –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ - –∫ —Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä—É

  const conditionalMap = {
    WeatherAgent: "WeatherAgent",
    GeographyAgent: "GeographyAgent",
    FINISH: END,
  };

  workflow.addConditionalEdges("supervisor", (state) => state.next, conditionalMap);
  workflow.setEntryPoint("supervisor");

  console.log("\n‚úÖ –ì—Ä–∞—Ñ —Å HITL-–ª–æ–≥–∏–∫–æ–π —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω.");
  return workflow.compile();
}